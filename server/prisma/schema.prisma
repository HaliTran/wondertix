datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output = "../prisma/generated/type-graphql"
}

model customers {
  id             Int           @id @default(autoincrement())
  custname       String        @db.VarChar(255)
  email          String?       @db.VarChar(100)
  phone          String?       @db.VarChar(15)
  custaddress    String?       @db.VarChar(255)
  newsletter     Boolean?      @default(false)
  donorbadge     String?       @db.VarChar(100)
  seatingaccom   Boolean?
  vip            Boolean?      @default(false)
  volunteer_list Boolean       @default(false) @map("volunteer list")
  donations      donations[]
  reservation    reservation[]
  task           task[]
  tickets        tickets[]
}

model discounts {
  id          Int       @id @default(autoincrement())
  code        String?   @db.VarChar(255)
  amount      Decimal?  @db.Money
  enddate     DateTime? @db.Date
  startdate   DateTime? @db.Date
  usagelimit  Int?
  min_tickets Int?
  min_events  Int?
}

model donations {
  id          Int        @id @default(autoincrement())
  donorid     Int?
  isanonymous Boolean?   @default(false)
  amount      Decimal?   @db.Money
  dononame    String?    @db.VarChar(255)
  frequency   freq?
  comments    String?    @db.VarChar(255)
  donodate    DateTime?  @db.Date
  customers   customers? @relation(fields: [donorid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task        task[]
}

model event_instances {
  id             Int             @id(map: "showtimes_pkey") @default(autoincrement())
  eventid        Int?
  eventdate      DateTime?       @db.Date
  starttime      DateTime?       @db.Time(6)
  salestatus     Boolean?
  totalseats     Int?
  availableseats Int?
  purchaseuri    String?         @db.VarChar(255)
  events         events?         @relation(fields: [eventid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "showtimes_playid_fkey")
  linkedtickets  linkedtickets[]
  tickets        tickets[]
}

model events {
  id               Int               @id(map: "plays_pkey") @default(autoincrement())
  seasonid         Int?
  eventname        String            @db.VarChar(255)
  eventdescription String?           @db.VarChar(255)
  active           Boolean?
  image_url        String?           @db.VarChar(255)
  seasons          seasons?          @relation(fields: [seasonid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "plays_seasonid_fkey")
  event_instances  event_instances[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model exdoorlist {
  id            Int
  name          String?
  vip           Boolean?
  donor         Boolean?
  accomodations Boolean?
  num_tickets   Int?
  arrived       Boolean?

  @@ignore
}

model linkedtickets {
  id                Int              @id @default(autoincrement())
  event_instance_id Int?
  ticket_type       Int?
  dummy             String?
  event_instances   event_instances? @relation(fields: [event_instance_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "linkedtickets_showid_fkey")
  tickettype        tickettype?      @relation(fields: [ticket_type], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservation {
  transno    Int        @id @default(autoincrement())
  custid     Int?
  eventid    Int?
  eventname  String?    @db.VarChar(255)
  eventdate  DateTime?  @db.Date
  showtime   DateTime?  @db.Time(6)
  numtickets Int?
  customers  customers? @relation(fields: [custid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task       task[]
}

model saved_reports {
  id         Int     @id @default(autoincrement())
  table_name String?
  query_attr String?
}

model seasons {
  id         Int          @id @default(autoincrement())
  name       String?      @db.VarChar(100)
  startdate  DateTime?    @db.Timestamp(6)
  enddate    DateTime?    @db.Timestamp(6)
  events     events[]
  tickettype tickettype[]
}

model task {
  id                          Int          @id @default(autoincrement())
  parent_id                   Int?
  subject                     String?      @db.VarChar
  description                 String?      @db.VarChar
  status                      state?
  assign_to                   Int?
  report_to                   Int?
  date_created                DateTime?    @db.Timestamptz(6)
  date_assigned               DateTime?    @db.Timestamptz(6)
  due_date                    DateTime?    @db.Timestamptz(6)
  rel_contact                 Int?
  rel_donation                Int?
  rel_ticket_order            Int?
  rel_account                 Int?
  users_task_assign_toTousers users?       @relation("task_assign_toTousers", fields: [assign_to], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_fk1")
  task                        task?        @relation("taskTotask_parent_id", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_fk0")
  customers                   customers?   @relation(fields: [rel_contact], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_fk3")
  donations                   donations?   @relation(fields: [rel_donation], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_fk4")
  reservation                 reservation? @relation(fields: [rel_ticket_order], references: [transno], onDelete: NoAction, onUpdate: NoAction, map: "task_fk5")
  users_task_report_toTousers users?       @relation("task_report_toTousers", fields: [report_to], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_fk2")
  other_task                  task[]       @relation("taskTotask_parent_id")
  task_notes                  task_notes[]
}

model task_notes {
  id           Int       @id @default(autoincrement())
  task_id      Int?
  notes        String?   @db.VarChar
  date_created DateTime? @db.Timestamptz(6)
  task         task?     @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_notes_fk0")
}

model tickets {
  ticketno        Int              @id @default(autoincrement())
  type            Int?
  eventinstanceid Int?
  custid          Int?
  paid            Boolean?
  active          Boolean?
  checkedin       Boolean?
  checkedin_ts    DateTime?        @db.Timestamp(6)
  payment_intent  String?          @db.VarChar
  comments        String?          @db.VarChar(500)
  customers       customers?       @relation(fields: [custid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  event_instances event_instances? @relation(fields: [eventinstanceid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tickets_eventid_fkey")
  tickettype      tickettype?      @relation(fields: [type], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tickettype {
  id            Int             @id
  name          String?         @db.VarChar(100)
  isseason      Boolean?
  seasonid      Int?
  price         Decimal?        @db.Money
  concessions   Decimal?        @db.Money
  seasons       seasons?        @relation(fields: [seasonid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  linkedtickets linkedtickets[]
  tickets       tickets[]
}

model users {
  id                         Int      @id @default(autoincrement())
  username                   String?  @unique @db.VarChar(255)
  pass_hash                  String?  @db.VarChar(255)
  is_superadmin              Boolean? @default(false)
  task_task_assign_toTousers task[]   @relation("task_assign_toTousers")
  task_task_report_toTousers task[]   @relation("task_report_toTousers")
}

enum freq {
  one_time @map("one-time")
  weekly
  monthly
  yearly
}

enum state {
  not_started
  in_progress
  completed
}
